package com.javatalent.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import com.mongodb.lang.NonNull;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;

@Data
@NoArgsConstructor
@RequiredArgsConstructor
@AllArgsConstructor
@Document //Maps Entity class objects to the JSON formatted Documents
public class Book {

    @Id //Making this variable as ID, will be auto generated by MongoDB
    private String id;

    @NonNull
    private Integer bookId;

    @NonNull
    private String bookName;

    @NonNull
    private String authorName;

    @NonNull
    private Double price;
    

	public String getId() {
		return id;
	}


	public void setId(String id) {
		this.id = id;
	}


	public Integer getBookId() {
		return bookId;
	}


	public void setBookId(Integer bookId) {
		this.bookId = bookId;
	}


	public String getBookName() {
		return bookName;
	}


	public void setBookName(String bookName) {
		this.bookName = bookName;
	}


	public String getAuthorName() {
		return authorName;
	}


	public void setAuthorName(String authorName) {
		this.authorName = authorName;
	}


	public Double getPrice() {
		return price;
	}


	public void setPrice(Double price) {
		this.price = price;
	}
	
	   //The following were not given
    
	 // Constructor matching the fields
	    public Book(Integer bookId, String bookName, String authorName, Double price) {
	        this.bookId = bookId;
	        this.bookName = bookName;
	        this.authorName = authorName;
	        this.price = price;
	    }



	// Override toString() to provide meaningful representation
    @Override
    public String toString() {
        return String.format(
            "Book[id='%s', bookId=%d, bookName='%s', authorName='%s', price=%.2f]",
            id, bookId, bookName, authorName, price
        );
    }
}
